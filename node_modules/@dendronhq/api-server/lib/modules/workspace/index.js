"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkspaceController = void 0;
const common_all_1 = require("@dendronhq/common-all");
const engine_server_1 = require("@dendronhq/engine-server");
const core_1 = require("../../core");
const utils_1 = require("../../utils");
const common_server_1 = require("@dendronhq/common-server");
class WorkspaceController {
    static instance() {
        if (!WorkspaceController.singleton) {
            WorkspaceController.singleton = new WorkspaceController();
        }
        return WorkspaceController.singleton;
    }
    async init({ uri }) {
        var _a;
        const start = process.hrtime();
        const ctx = "WorkspaceController:init";
        const logger = (0, core_1.getLogger)();
        logger.info({ ctx, msg: "enter", uri });
        const config = common_server_1.DConfig.readConfigSync(uri);
        let engine;
        if ((_a = config.dev) === null || _a === void 0 ? void 0 : _a.enableEngineV3) {
            engine = engine_server_1.DendronEngineV3.create({
                wsRoot: uri,
                logger,
            });
        }
        else {
            engine = engine_server_1.DendronEngineV2.create({
                wsRoot: uri,
                logger,
            });
        }
        const { data, error } = await engine.init();
        if (error && error.severity === common_all_1.ERROR_SEVERITY.FATAL) {
            logger.error({ ctx, msg: "fatal error initializing notes", error });
            return { data, error };
        }
        await (0, utils_1.putWS)({ ws: uri, engine });
        const duration = (0, common_server_1.getDurationMilliseconds)(start);
        logger.info({ ctx, msg: "finish init", duration, uri, error });
        let error2;
        if (error) {
            error2 = (0, common_all_1.error2PlainObject)(error);
        }
        const payload = {
            error: error2,
            data,
        };
        return payload;
    }
    async sync({ ws }) {
        const engine = await (0, utils_1.getWSEngine)({ ws });
        const notes = await engine.findNotes({ excludeStub: false });
        return {
            data: {
                notes: common_all_1.NoteDictsUtils.createNotePropsByIdDict(notes),
                config: common_server_1.DConfig.readConfigSync(engine.wsRoot),
                vaults: engine.vaults,
                wsRoot: engine.wsRoot,
            },
        };
    }
}
exports.WorkspaceController = WorkspaceController;
//# sourceMappingURL=index.js.map